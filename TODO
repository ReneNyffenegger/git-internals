Stashing

git checkout -b B bla
  fatal: 'bla' is not a commit and a branch 'B' cannot be created from it

git merge branch_A branch_B
  -> Merge made by the octopus strategy

https://github.com/git-tips/tips

git cat-file -p master^{tree}
  The master^{tree} syntax specifies the tree object that is pointed to by the last commit on your master branch. 

 »Values of reference«:
    HEAD@{10}
    master@{one.week.ago}

Commit object with multiple ancestors
  https://git-scm.com/docs/git-commit-tree 
    -p … -p … -p …


https://stackoverflow.com/a/17603805/180275      
   Neat. I didn't know git checkout could take a tree id instead of a commit-ish. Having a play with this 

git log --graph --oneline --decorate

https://matthew-brett.github.io/curious-git/curious_git.html
https://matthew-brett.github.io/curious-git/git_object_types.html

am
annotate
apply
archive
bisect
blame
branch
bundle
cat-file
checkout
checkout-index
cherry
cherry-pick
citool
clean
clone
commit
config
count-objects
daemon
describe
diff
diff-files
diff-index
difftool
diff-tree
fast-export
fast-import
fetch
fetch-pack
filter-branch
for-each-ref
format-patch
fsck
gc
get-tar-commit-id
gitk
gitweb
grep
gui
hash-object
help
http-backend
index-pack
init
instaweb
log
  git log --stat --summary
  git log --pretty=format:"%h%x09%an%x09%ad%x09%s"
  --date=short
  https://git-scm.com/docs/pretty-formats
ls-files
ls-remote
ls-tree
merge
merge-base
merge-file
merge-index
mergetool
merge-tree
mktag
mktree
mv
name-rev
notes
pack-objects
pack-redundant
pack-refs
prune
prune-packed
pull
push
  git push doesn't push all of your local branches: how would it know which
  remote branches to push them to? It only pushes local branches which have
  been configured to push to a particular remote branch.

  git push --all origin
    this pushes the commits to separate branches on the repo, not from one
    branch into master.

rebase
reflog
relink
remote
repack
replace
rerere
reset
revert
rev-list
rev-parse
rm
send-pack
shortlog
show
show-branch
show-index
show-ref
stash
status
submodule
symbolic-ref
tag
unpack-file
unpack-objects
update-index
update-ref
update-server-info
var
verify-commit
verify-pack
verify-tag
whatchanged
worktree

https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298

Normally a commit would identify a new "HEAD" state, and while Git doesn’t care
  where you save the note about that state, in practice we tend to just write the
  result to the file that is pointed at by .git/HEAD, so that we can always see
  what the last committed state was.

While a tree represents a particular directory state of a working directory, a
  commit represents that state in "time", and explains how to get there.


.gitconfig
  [log]
    date = relative
  [format]
    pretty = format:%h %Cblue%ad%Creset %ae %Cgreen%s%Creset
    pretty = format:%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(7)%aN%Cred%d %Creset%s

https://stackoverflow.com/questions/16408300/what-are-the-differences-between-local-branch-local-tracking-branch-remote-bra

Detached head

  You can think of it as an anonymous branch

  ***


  Any checkout of a commit that is not the name of one of your branches will
  get you a detached HEAD.
  For example, if you checkout a "remote branch" without tracking it first, you
  can end up with a detached HEAD.

  ***

  In fact, you will get a detached HEAD whenever you checkout any commit by its
  SHA1, whether or not it's at the tip of a branch; the only kind of thing you
  can checkout without getting a detached HEAD is a branch name. 

  ***

  Another way you can enter detached head state is if you're in the middle of
  an interactive rebase, and you want to edit one of the commits. When Git
  drops you at the commit to edit, you'll be in a detached head state until you
  finish the rebase


New local branches
  A new local branch must be pushed explicitly:

  git push origin your-new-branch-name

Upstream branches

  $git push origin
  fatal: The current branch fixUsage has no upstream branch.
  To push the current branch and set the remote as upstream, use
  
      git push --set-upstream origin fixUsage
   

