https://github.com/git-tips/tips

git cat-file -p master^{tree}
  The master^{tree} syntax specifies the tree object that is pointed to by the last commit on your master branch. 

 »Values of reference«:
    HEAD@{10}
    master@{one.week.ago}

Commit object with multiple ancestors
  https://git-scm.com/docs/git-commit-tree 
    -p … -p … -p …


https://stackoverflow.com/a/17603805/180275      
   Neat. I didn't know git checkout could take a tree id instead of a commit-ish. Having a play with this 

git log --graph --oneline --decorate

https://matthew-brett.github.io/curious-git/curious_git.html
https://matthew-brett.github.io/curious-git/git_object_types.html

am
annotate
apply
archive
bisect
blame
branch
bundle
cat-file
checkout
checkout-index
cherry
cherry-pick
citool
clean
clone
commit
config
count-objects
daemon
describe
diff
diff-files
diff-index
difftool
diff-tree
fast-export
fast-import
fetch
fetch-pack
filter-branch
for-each-ref
format-patch
fsck
gc
get-tar-commit-id
gitk
gitweb
grep
gui
hash-object
help
http-backend
index-pack
init
instaweb
log
ls-files
ls-remote
ls-tree
merge
merge-base
merge-file
merge-index
mergetool
merge-tree
mktag
mktree
mv
name-rev
notes
pack-objects
pack-redundant
pack-refs
prune
prune-packed
pull
push
rebase
reflog
relink
remote
repack
replace
rerere
reset
revert
rev-list
rev-parse
rm
send-pack
shortlog
show
show-branch
show-index
show-ref
stash
status
submodule
symbolic-ref
tag
unpack-file
unpack-objects
update-index
update-ref
update-server-info
var
verify-commit
verify-pack
verify-tag
whatchanged
worktree

https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298

Normally a commit would identify a new "HEAD" state, and while Git doesn’t care
  where you save the note about that state, in practice we tend to just write the
  result to the file that is pointed at by .git/HEAD, so that we can always see
  what the last committed state was.

While a tree represents a particular directory state of a working directory, a
  commit represents that state in "time", and explains how to get there.
